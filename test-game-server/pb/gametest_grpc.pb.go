// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Game_ConnectClient, error)
	Disconnect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectionStats, error)
	SessionGame(ctx context.Context, opts ...grpc.CallOption) (Game_SessionGameClient, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Game_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[0], "/Game/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_ConnectClient interface {
	Recv() (*ConnectionStats, error)
	grpc.ClientStream
}

type gameConnectClient struct {
	grpc.ClientStream
}

func (x *gameConnectClient) Recv() (*ConnectionStats, error) {
	m := new(ConnectionStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Disconnect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectionStats, error) {
	out := new(ConnectionStats)
	err := c.cc.Invoke(ctx, "/Game/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SessionGame(ctx context.Context, opts ...grpc.CallOption) (Game_SessionGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Game_ServiceDesc.Streams[1], "/Game/SessionGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameSessionGameClient{stream}
	return x, nil
}

type Game_SessionGameClient interface {
	Send(*UpdatePlayerRequest) error
	Recv() (*GameResponce, error)
	grpc.ClientStream
}

type gameSessionGameClient struct {
	grpc.ClientStream
}

func (x *gameSessionGameClient) Send(m *UpdatePlayerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameSessionGameClient) Recv() (*GameResponce, error) {
	m := new(GameResponce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServer is the server API for Game service.
// All implementations should embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	Connect(*ConnectRequest, Game_ConnectServer) error
	Disconnect(context.Context, *ConnectRequest) (*ConnectionStats, error)
	SessionGame(Game_SessionGameServer) error
}

// UnimplementedGameServer should be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) Connect(*ConnectRequest, Game_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGameServer) Disconnect(context.Context, *ConnectRequest) (*ConnectionStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedGameServer) SessionGame(Game_SessionGameServer) error {
	return status.Errorf(codes.Unimplemented, "method SessionGame not implemented")
}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).Connect(m, &gameConnectServer{stream})
}

type Game_ConnectServer interface {
	Send(*ConnectionStats) error
	grpc.ServerStream
}

type gameConnectServer struct {
	grpc.ServerStream
}

func (x *gameConnectServer) Send(m *ConnectionStats) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Game/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Disconnect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SessionGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).SessionGame(&gameSessionGameServer{stream})
}

type Game_SessionGameServer interface {
	Send(*GameResponce) error
	Recv() (*UpdatePlayerRequest, error)
	grpc.ServerStream
}

type gameSessionGameServer struct {
	grpc.ServerStream
}

func (x *gameSessionGameServer) Send(m *GameResponce) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameSessionGameServer) Recv() (*UpdatePlayerRequest, error) {
	m := new(UpdatePlayerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _Game_Disconnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Game_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SessionGame",
			Handler:       _Game_SessionGame_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gametest.proto",
}
